▶ 프로젝트 작업순서
1. 프로젝트 생성
  : 파일명은 '프로젝트명'이 된다.
  : 생성시에 '패키지명'을 3개 이상지정한다. 이때 3번째가 contextPath가 된다.

2. 한글처리 : web.xml 에서 필터처리한다.
<!-- 한글처리(필터적용) -->
	<filter>
	  <filter-name>encoding</filter-name>
	  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
		  <param-name>encoding</param-name>
		  <param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
	  <filter-name>encoding</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>

3. java컴파일 버젼 변경 : '프로젝트 속성'에서 'Project Facets'에서 자바버젼(1.8)과 톰캣설정(9)시켜준다.

4. pom.xml 에서 사용중인 자바/스프링 버전을 설정한다.
  자바버전 : 1.8
  스프링버전 : 4.3.14
  maven : source - 1.8 , target - 1.8

5. pom.xml 에 의존성 추가한다.(MyBatis , aJax, ~~~~)
<!-- Database에 필요한 설정(4개) -->
		<!-- mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.7</version>
		</dependency>
		<!-- mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>2.0.6</version>
		</dependency>
		<!-- spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>5.3.13</version>
		</dependency>
		<!-- mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.26</version>
		</dependency>

6. root-context.xml 에 Namespaces 설정하기(5개)
  aop / beans / context / jdbc / mybatis

7. root-context.xml 에 'jdbc / MyBatis설정' 하기
	<!-- 데이터베이스 연동하기(JDBC 설정) -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/javacourse?useSSL=true&amp;verifyServerCertificate=false&amp;serverTimezone=UTC"/>
		<property name="username" value="root"/>
		<property name="password" value="1234"/>
	</bean>
	
	<!-- MyBatis Spring 연동하기(모듈설정) - mapper정보설정 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"/>
	</bean>
	
	<mybatis-spring:scan base-package="com.spring.springTest.dao"/>

8. dao 패키지를 만들어 준다.
  : 예) com.spring.springText.dao

9. mappers폴더을 만들어준다.(작업중에는~~Mapper.xml 파일도 만들어 준다.)
  : 생성위치?
    src/main/resources 패키지 아래, mappers폴더를 만든다

  : 실제 매퍼파일은, 그 아래 ~~Mapper.xml파일로 만들어 주어야 한다.


================================================
9번작업의 mappers폴더를 생성한후 프로젝트를 실행시켜본다. 화면에 정상적으로 출력되지 않으면 앞의 과정을 체크한다.
================================================

10. ~~Mapper.xml 파일에 기재될 내용
  예) userMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="">

</mapper>

11. 작업에 필요한 폴더와 패키지들을 모두 만들어준다.
  : 패키지명?
    - src/main/java폴더아래 만든다.
    xxx.xxx.xxx.service
    xxx.xxx.xxx.dao
    xxx.xxx.xxx.vo

    - src/main/resources 아래 폴더 만든다.
    mappers 폴더 생성


12. 프로젝트에 필요한 파일들 작업처리
  - 테이블생성 : user테이블
  - vo 생성  : UserVO
  - Controller 생성 : UserController
  - 서비스 인터페이스 생성 : UserService    <-- 인터페이스
    서비스 인터페이스 구현객체 생성 : UserServiceImpl   <-- 클래스파일 (상단에 '@Service' 입력)
    DAO 인터페이스 생성 : UserDAO	<-- 인터페이스
    DAO 인터페이스 구현객체 생성(여기선 생략 - 인터페이스에 설정할것임)
